{"version":3,"file":"static/js/53.51534f08.chunk.js","mappings":"uJAOA,MAAMA,EAELC,WAAAA,GAECC,KAAKC,QAAS,EAGdD,KAAKE,SAAU,EAGfF,KAAKG,WAAY,EAGjBH,KAAKI,OAAQ,EAGbJ,KAAKK,gBAAiB,CAEvB,CAEAC,OAAAA,GAAgC,CAEhCC,MAAAA,GAECC,QAAQC,MAAO,6DAEhB,CAEAC,OAAAA,GAAW,EAMZ,MAAMC,EAAU,IAAIC,EAAAA,KAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAI3D,MAAMC,UAAmCC,EAAAA,IAExCf,WAAAA,GAECgB,QAEAf,KAAKgB,aAAc,WAAY,IAAIC,EAAAA,IAAwB,EAAI,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,EAAG,GAAK,IAClGjB,KAAKgB,aAAc,KAAM,IAAIC,EAAAA,IAAwB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,GAE5E,EAID,MAAMC,EAAY,IAAIL,EAEtB,MAAMM,EAELpB,WAAAA,CAAaqB,GAEZpB,KAAKqB,MAAQ,IAAIC,EAAAA,IAAMJ,EAAWE,EAEnC,CAEAV,OAAAA,GAECV,KAAKqB,MAAME,SAASb,SAErB,CAEAH,MAAAA,CAAQiB,GAEPA,EAASjB,OAAQP,KAAKqB,MAAOV,EAE9B,CAEA,YAAIS,GAEH,OAAOpB,KAAKqB,MAAMD,QAEnB,CAEA,YAAIA,CAAUK,GAEbzB,KAAKqB,MAAMD,SAAWK,CAEvB,E,0ECrFD,MAAMC,UAAmB5B,EAAAA,EAExBC,WAAAA,CAAa4B,EAAOC,GAAwE,IAAhEC,EAAgBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMG,EAAUH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAUJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAEpFf,QAEAf,KAAK2B,MAAQA,EACb3B,KAAK4B,OAASA,EAEd5B,KAAK6B,iBAAmBA,EAExB7B,KAAKiC,WAAaA,EAClBjC,KAAKkC,WAAaA,EAElBlC,KAAKI,OAAQ,EACbJ,KAAKmC,YAAa,EAClBnC,KAAKG,WAAY,EACjBH,KAAKoC,eAAiB,IAAIC,EAAAA,GAE3B,CAEA9B,MAAAA,CAAQiB,EAAUc,EAAaC,GAE9B,MAAMC,EAAehB,EAASiB,UAG9B,IAAIC,EAAeC,EAFnBnB,EAASiB,WAAY,EAIU,OAA1BzC,KAAK6B,mBAETc,EAAsB3C,KAAK2B,MAAME,iBAEjC7B,KAAK2B,MAAME,iBAAmB7B,KAAK6B,kBAIX,OAApB7B,KAAKiC,aAETT,EAASoB,cAAe5C,KAAKoC,gBAC7BZ,EAASqB,cAAe7C,KAAKiC,WAAYT,EAASsB,kBAI1B,OAApB9C,KAAKkC,aAETQ,EAAgBlB,EAASsB,gBACzBtB,EAASuB,cAAe/C,KAAKkC,aAIN,GAAnBlC,KAAKmC,YAETX,EAASW,aAIVX,EAASwB,gBAAiBhD,KAAKK,eAAiB,KAAOkC,IAEnC,IAAfvC,KAAKI,OAGToB,EAASpB,MAAOoB,EAASyB,eAAgBzB,EAAS0B,eAAgB1B,EAAS2B,kBAI5E3B,EAASjB,OAAQP,KAAK2B,MAAO3B,KAAK4B,QAIT,OAApB5B,KAAKiC,YAETT,EAASqB,cAAe7C,KAAKoC,gBAIL,OAApBpC,KAAKkC,YAETV,EAASuB,cAAeL,GAIM,OAA1B1C,KAAK6B,mBAET7B,KAAK2B,MAAME,iBAAmBc,GAI/BnB,EAASiB,UAAYD,CAEtB,E","sources":["../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\trenderer.setClearColor( this.clearColor, renderer.getClearAlpha() );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth == true ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\tif ( this.clear === true ) {\n\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// restore\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"names":["Pass","constructor","this","isPass","enabled","needsSwap","clear","renderToScreen","setSize","render","console","error","dispose","_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","super","setAttribute","Float32BufferAttribute","_geometry","FullScreenQuad","material","_mesh","Mesh","geometry","renderer","value","RenderPass","scene","camera","overrideMaterial","arguments","length","undefined","clearColor","clearAlpha","clearDepth","_oldClearColor","Color","writeBuffer","readBuffer","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","setClearColor","getClearAlpha","setClearAlpha","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil"],"sourceRoot":""}