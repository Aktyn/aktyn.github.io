{"version":3,"file":"static/js/892.b9391fb0.chunk.js","mappings":"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","sources":["../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/shaders/CopyShader.js"],"sourcesContent":["import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\tstate.buffers.color.setMask( true );\n\t\tstate.buffers.depth.setMask( true );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tClock,\n\tHalfFloatType,\n\tNoBlending,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\t\tthis.copyPass.material.blending = NoBlending;\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tname: 'CopyShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n"],"names":["ShaderPass","Pass","constructor","shader","textureID","super","this","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","name","defines","Object","assign","vertexShader","fragmentShader","fsQuad","FullScreenQuad","render","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","dispose","MaskPass","scene","camera","needsSwap","inverse","context","getContext","state","writeValue","clearValue","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","_pixelRatio","getPixelRatio","size","getSize","Vector2","_width","width","_height","height","WebGLRenderTarget","type","HalfFloatType","renderTarget1","renderTarget2","passes","copyPass","CopyShader","blending","NoBlending","clock","Clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","isPass","console","error","_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","_geometry","_mesh","Mesh","geometry"],"sourceRoot":""}