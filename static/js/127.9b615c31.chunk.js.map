{"version":3,"file":"static/js/127.9b615c31.chunk.js","mappings":"2KAMA,MAAMA,EAAmB,CAExBC,KAAM,mBAENC,SAAU,CAET,KAAQ,CAAEC,MAAO,KACjB,KAAQ,CAAEA,MAAO,MACjB,KAAQ,CAAEA,MAAO,OAIlBC,aAAwB,8JAWxBC,eAA0B,sbClB3B,MAAMC,UAAuBC,EAAAA,EAE5BC,WAAAA,GAA2B,IAAdC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAEnBG,QAEAC,KAAKC,OAASf,EAEdc,KAAKZ,SAAWc,EAAAA,IAAcC,MAAOH,KAAKC,OAAOb,UAEjDY,KAAKZ,SAAgB,KAAGC,MAAQM,EAEhCK,KAAKI,YAAc,IAAIC,EAAAA,IAAmBC,OAAOC,WAAYD,OAAOE,YAAa,CAChFC,UAAWC,EAAAA,IACXC,KAAMC,EAAAA,MAGPZ,KAAKa,WAAa,IAAIR,EAAAA,IAAmBC,OAAOC,WAAYD,OAAOE,YAAa,CAC/EC,UAAWC,EAAAA,IACXC,KAAMC,EAAAA,MAGPZ,KAAKc,eAAiB,IAAIC,EAAAA,IAAgB,CAEzC3B,SAAUY,KAAKZ,SACfE,aAAcU,KAAKC,OAAOX,aAC1BC,eAAgBS,KAAKC,OAAOV,iBAI7BS,KAAKgB,WAAa,IAAIC,EAAAA,EAAgBjB,KAAKc,gBAE3Cd,KAAKkB,eAAiB,IAAIC,EAAAA,IAC1BnB,KAAKoB,WAAa,IAAIH,EAAAA,EAAgBjB,KAAKkB,eAE5C,CAEAG,MAAAA,CAAQC,EAAUC,EAAaC,GAE9BxB,KAAKZ,SAAgB,KAAGC,MAAQW,KAAKa,WAAWY,QAChDzB,KAAKZ,SAAgB,KAAGC,MAAQmC,EAAWC,QAE3CH,EAASI,gBAAiB1B,KAAKI,aAC/BJ,KAAKgB,WAAWK,OAAQC,GAExBtB,KAAKoB,WAAWO,SAASC,IAAM5B,KAAKI,YAAYqB,QAE3CzB,KAAK6B,gBAETP,EAASI,gBAAiB,MAC1B1B,KAAKoB,WAAWC,OAAQC,KAIxBA,EAASI,gBAAiBH,GAErBvB,KAAK8B,OAAQR,EAASQ,QAE3B9B,KAAKoB,WAAWC,OAAQC,IAKzB,MAAMS,EAAO/B,KAAKa,WAClBb,KAAKa,WAAab,KAAKI,YACvBJ,KAAKI,YAAc2B,CAGpB,CAEAC,OAAAA,CAASC,EAAOC,GAEflC,KAAKI,YAAY4B,QAASC,EAAOC,GACjClC,KAAKa,WAAWmB,QAASC,EAAOC,EAEjC,CAEAC,OAAAA,GAECnC,KAAKI,YAAY+B,UACjBnC,KAAKa,WAAWsB,UAEhBnC,KAAKc,eAAeqB,UACpBnC,KAAKkB,eAAeiB,UAEpBnC,KAAKgB,WAAWmB,UAChBnC,KAAKoB,WAAWe,SAEjB,E,sDC5FD,MAAM1C,EAELC,WAAAA,GAECM,KAAKoC,QAAS,EAGdpC,KAAKqC,SAAU,EAGfrC,KAAKsC,WAAY,EAGjBtC,KAAK8B,OAAQ,EAGb9B,KAAK6B,gBAAiB,CAEvB,CAEAG,OAAAA,GAAgC,CAEhCX,MAAAA,GAECkB,QAAQC,MAAO,6DAEhB,CAEAL,OAAAA,GAAW,EAMZ,MAAMM,EAAU,IAAIC,EAAAA,KAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAI3D,MAAMC,UAAmCC,EAAAA,IAExClD,WAAAA,GAECK,QAEAC,KAAK6C,aAAc,WAAY,IAAIC,EAAAA,IAAwB,EAAI,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,EAAG,GAAK,IAClG9C,KAAK6C,aAAc,KAAM,IAAIC,EAAAA,IAAwB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,GAE5E,EAID,MAAMC,EAAY,IAAIJ,EAEtB,MAAM1B,EAELvB,WAAAA,CAAaiC,GAEZ3B,KAAKgD,MAAQ,IAAIC,EAAAA,IAAMF,EAAWpB,EAEnC,CAEAQ,OAAAA,GAECnC,KAAKgD,MAAME,SAASf,SAErB,CAEAd,MAAAA,CAAQC,GAEPA,EAASD,OAAQrB,KAAKgD,MAAOP,EAE9B,CAEA,YAAId,GAEH,OAAO3B,KAAKgD,MAAMrB,QAEnB,CAEA,YAAIA,CAAUtC,GAEbW,KAAKgD,MAAMrB,SAAWtC,CAEvB,E","sources":["../node_modules/three/examples/jsm/shaders/AfterimageShader.js","../node_modules/three/examples/jsm/postprocessing/AfterimagePass.js","../node_modules/three/examples/jsm/postprocessing/Pass.js"],"sourcesContent":["/**\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\n\nconst AfterimageShader = {\n\n\tname: 'AfterimageShader',\n\n\tuniforms: {\n\n\t\t'damp': { value: 0.96 },\n\t\t'tOld': { value: null },\n\t\t'tNew': { value: null }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float damp;\n\n\t\tuniform sampler2D tOld;\n\t\tuniform sampler2D tNew;\n\n\t\tvarying vec2 vUv;\n\n\t\tvec4 when_gt( vec4 x, float y ) {\n\n\t\t\treturn max( sign( x - y ), 0.0 );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 texelOld = texture2D( tOld, vUv );\n\t\t\tvec4 texelNew = texture2D( tNew, vUv );\n\n\t\t\ttexelOld *= damp * when_gt( texelOld, 0.1 );\n\n\t\t\tgl_FragColor = max(texelNew, texelOld);\n\n\t\t}`\n\n};\n\nexport { AfterimageShader };\n","import {\n\tHalfFloatType,\n\tMeshBasicMaterial,\n\tNearestFilter,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\nclass AfterimagePass extends Pass {\n\n\tconstructor( damp = 0.96 ) {\n\n\t\tsuper();\n\n\t\tthis.shader = AfterimageShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( this.shader.uniforms );\n\n\t\tthis.uniforms[ 'damp' ].value = damp;\n\n\t\tthis.textureComp = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis.textureOld = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis.compFsMaterial = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: this.shader.vertexShader,\n\t\t\tfragmentShader: this.shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.compFsQuad = new FullScreenQuad( this.compFsMaterial );\n\n\t\tthis.copyFsMaterial = new MeshBasicMaterial();\n\t\tthis.copyFsQuad = new FullScreenQuad( this.copyFsMaterial );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\tthis.uniforms[ 'tOld' ].value = this.textureOld.texture;\n\t\tthis.uniforms[ 'tNew' ].value = readBuffer.texture;\n\n\t\trenderer.setRenderTarget( this.textureComp );\n\t\tthis.compFsQuad.render( renderer );\n\n\t\tthis.copyFsQuad.material.map = this.textureComp.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Swap buffers.\n\t\tconst temp = this.textureOld;\n\t\tthis.textureOld = this.textureComp;\n\t\tthis.textureComp = temp;\n\t\t// Now textureOld contains the latest image, ready for the next frame.\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.textureComp.setSize( width, height );\n\t\tthis.textureOld.setSize( width, height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.textureComp.dispose();\n\t\tthis.textureOld.dispose();\n\n\t\tthis.compFsMaterial.dispose();\n\t\tthis.copyFsMaterial.dispose();\n\n\t\tthis.compFsQuad.dispose();\n\t\tthis.copyFsQuad.dispose();\n\n\t}\n\n}\n\nexport { AfterimagePass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n"],"names":["AfterimageShader","name","uniforms","value","vertexShader","fragmentShader","AfterimagePass","Pass","constructor","damp","arguments","length","undefined","super","this","shader","UniformsUtils","clone","textureComp","WebGLRenderTarget","window","innerWidth","innerHeight","magFilter","NearestFilter","type","HalfFloatType","textureOld","compFsMaterial","ShaderMaterial","compFsQuad","FullScreenQuad","copyFsMaterial","MeshBasicMaterial","copyFsQuad","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","material","map","renderToScreen","clear","temp","setSize","width","height","dispose","isPass","enabled","needsSwap","console","error","_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","_geometry","_mesh","Mesh","geometry"],"sourceRoot":""}