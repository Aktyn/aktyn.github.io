{"version":3,"file":"static/js/873.994f459e.chunk.js","mappings":"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","sources":["../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../node_modules/three/examples/jsm/shaders/CopyShader.js"],"sourcesContent":["import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\tstate.buffers.color.setMask( true );\n\t\tstate.buffers.depth.setMask( true );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tClock,\n\tHalfFloatType,\n\tNoBlending,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\t\tthis.copyPass.material.blending = NoBlending;\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tname: 'CopyShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n"],"names":["MaskPass","Pass","constructor","scene","camera","super","this","clear","needsSwap","inverse","render","renderer","writeBuffer","readBuffer","context","getContext","state","writeValue","clearValue","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","_pixelRatio","getPixelRatio","undefined","size","getSize","Vector2","_width","width","_height","height","WebGLRenderTarget","type","HalfFloatType","texture","name","renderTarget1","renderTarget2","clone","renderToScreen","passes","copyPass","ShaderPass","CopyShader","material","blending","NoBlending","clock","Clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","isPass","console","error","_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","_geometry","FullScreenQuad","_mesh","Mesh","geometry","value","shader","textureID","ShaderMaterial","uniforms","UniformsUtils","defines","Object","assign","vertexShader","fragmentShader","fsQuad","autoClearColor","autoClearDepth","autoClearStencil"],"sourceRoot":""}