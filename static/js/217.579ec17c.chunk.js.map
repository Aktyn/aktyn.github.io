{"version":3,"file":"static/js/217.579ec17c.chunk.js","mappings":"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","sources":["../node_modules/three/examples/jsm/shaders/OutputShader.js","../node_modules/three/examples/jsm/postprocessing/OutputPass.js","../node_modules/three/examples/jsm/postprocessing/Pass.js"],"sourcesContent":["const OutputShader = {\n\n\tname: 'OutputShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'toneMappingExposure': { value: 1 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\t\tprecision highp float;\n\n\t\tuniform mat4 modelViewMatrix;\n\t\tuniform mat4 projectionMatrix;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\t\n\t\tprecision highp float;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\t#include <tonemapping_pars_fragment>\n\t\t#include <colorspace_pars_fragment>\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\n\t\t\t// tone mapping\n\n\t\t\t#ifdef LINEAR_TONE_MAPPING\n\n\t\t\t\tgl_FragColor.rgb = LinearToneMapping( gl_FragColor.rgb );\n\n\t\t\t#elif defined( REINHARD_TONE_MAPPING )\n\n\t\t\t\tgl_FragColor.rgb = ReinhardToneMapping( gl_FragColor.rgb );\n\n\t\t\t#elif defined( CINEON_TONE_MAPPING )\n\n\t\t\t\tgl_FragColor.rgb = OptimizedCineonToneMapping( gl_FragColor.rgb );\n\n\t\t\t#elif defined( ACES_FILMIC_TONE_MAPPING )\n\n\t\t\t\tgl_FragColor.rgb = ACESFilmicToneMapping( gl_FragColor.rgb );\n\n\t\t\t#elif defined( AGX_TONE_MAPPING )\n\n\t\t\t\tgl_FragColor.rgb = AgXToneMapping( gl_FragColor.rgb );\n\n\t\t\t#elif defined( NEUTRAL_TONE_MAPPING )\n\n\t\t\t\tgl_FragColor.rgb = NeutralToneMapping( gl_FragColor.rgb );\n\n\t\t\t#endif\n\n\t\t\t// color space\n\n\t\t\t#ifdef SRGB_TRANSFER\n\n\t\t\t\tgl_FragColor = sRGBTransferOETF( gl_FragColor );\n\n\t\t\t#endif\n\n\t\t}`\n\n};\n\nexport { OutputShader };\n","import {\n\tColorManagement,\n\tRawShaderMaterial,\n\tUniformsUtils,\n\tLinearToneMapping,\n\tReinhardToneMapping,\n\tCineonToneMapping,\n\tAgXToneMapping,\n\tACESFilmicToneMapping,\n\tNeutralToneMapping,\n\tSRGBTransfer\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { OutputShader } from '../shaders/OutputShader.js';\n\nclass OutputPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t//\n\n\t\tconst shader = OutputShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new RawShaderMaterial( {\n\t\t\tname: shader.name,\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t\t// internal cache\n\n\t\tthis._outputColorSpace = null;\n\t\tthis._toneMapping = null;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'toneMappingExposure' ].value = renderer.toneMappingExposure;\n\n\t\t// rebuild defines if required\n\n\t\tif ( this._outputColorSpace !== renderer.outputColorSpace || this._toneMapping !== renderer.toneMapping ) {\n\n\t\t\tthis._outputColorSpace = renderer.outputColorSpace;\n\t\t\tthis._toneMapping = renderer.toneMapping;\n\n\t\t\tthis.material.defines = {};\n\n\t\t\tif ( ColorManagement.getTransfer( this._outputColorSpace ) === SRGBTransfer ) this.material.defines.SRGB_TRANSFER = '';\n\n\t\t\tif ( this._toneMapping === LinearToneMapping ) this.material.defines.LINEAR_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === ReinhardToneMapping ) this.material.defines.REINHARD_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === CineonToneMapping ) this.material.defines.CINEON_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === ACESFilmicToneMapping ) this.material.defines.ACES_FILMIC_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === AgXToneMapping ) this.material.defines.AGX_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === NeutralToneMapping ) this.material.defines.NEUTRAL_TONE_MAPPING = '';\n\n\t\t\tthis.material.needsUpdate = true;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.renderToScreen === true ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { OutputPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n"],"names":["OutputShader","name","uniforms","value","vertexShader","fragmentShader","OutputPass","Pass","constructor","super","shader","this","UniformsUtils","clone","material","RawShaderMaterial","fsQuad","FullScreenQuad","_outputColorSpace","_toneMapping","render","renderer","writeBuffer","readBuffer","texture","toneMappingExposure","outputColorSpace","toneMapping","defines","ColorManagement","getTransfer","SRGBTransfer","SRGB_TRANSFER","LinearToneMapping","LINEAR_TONE_MAPPING","ReinhardToneMapping","REINHARD_TONE_MAPPING","CineonToneMapping","CINEON_TONE_MAPPING","ACESFilmicToneMapping","ACES_FILMIC_TONE_MAPPING","AgXToneMapping","AGX_TONE_MAPPING","NeutralToneMapping","NEUTRAL_TONE_MAPPING","needsUpdate","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","dispose","isPass","enabled","needsSwap","setSize","console","error","_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","_geometry","_mesh","Mesh","geometry"],"sourceRoot":""}