@use 'sass:map';

@import 'common-styles/animation.scss';
@import 'common-styles/palette.scss';

.section-container {
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d;

  @each $name, $colors in $sectionColors {
    &.#{$name} {
      background-color: map.get($colors, 'background');
      color: map.get($colors, 'text');
    }
  }

  & > .section-content {
    height: 100%;
    width: 100%;
    transform-style: preserve-3d;

    display: grid;
    grid-template-rows: 100%;
    justify-content: stretch;
    align-items: stretch;

    & > * {
      max-height: 100%;
      max-width: 100%;
    }
  }
}

@each $name, $colors in $sectionColors {
  .#{$name} .navigation-button > * button.icon {
    border-color: rgba(getDarkenText(map.get($colors, 'text')), 0.5);

    &:not(:active):hover {
      border-color: getDarkenText(map.get($colors, 'text'));
    }
  }
}

.navigation-button {
  position: absolute;
  left: 0;
  right: 0;
  &.next {
    bottom: 2rem;
  }
  &.previous {
    top: 2rem;
  }
  margin-inline: auto;

  display: flex;
  justify-content: center;

  @extend .fade-in-from-bottom;
  animation-delay: 4s;

  @media screen and (max-height: 40rem) {
    & > * {
      transition: opacity 0.5s ease-in-out;
      opacity: 0;
      pointer-events: none !important;
    }
  }

  pointer-events: none;
  & > * {
    pointer-events: all;
    transition: opacity 0.5s ease-in;

    button.icon {
      display: flex;
      flex-direction: column;
      align-items: center;
      aspect-ratio: 1 / 1;

      border-style: dashed;
      transition:
        border-color 0.25s $smooth,
        color 0.25s $smooth;

      &.previous {
        transform: rotate(180deg);
      }

      & > svg {
        $arrowsDistance: 15%;

        &:first-of-type {
          margin-bottom: -50%;
          transform: translateY(-$arrowsDistance);
        }
        &:last-of-type {
          margin-top: -50%;
          transform: translateY($arrowsDistance);
        }

        @for $i from 1 through 2 {
          $startOffset: $arrowsDistance * if($i == 1, -1, 1);
          $endOffset: $arrowsDistance * if($i == 1, 0, 2);

          &:nth-child(#{$i}) {
            animation: pulse-down-#{$i} 7.5s $smooth infinite;
            animation-delay: 7s + 0.15s * ($i - 1);
          }

          @keyframes pulse-down-#{$i} {
            0% {
              transform: translateY($startOffset);
              opacity: 0.5;
            }
            10% {
              transform: translateY($endOffset);
              opacity: 1;
            }
            20% {
              transform: translateY($startOffset);
              opacity: 0.5;
            }
          }
        }
      }
    }
  }

  &.hidden > * {
    opacity: 0;
  }
}
